# Build stage
FROM node:18-alpine as build

# Set working directory
WORKDIR /app

# Install necessary build dependencies
RUN apk add --no-cache python3 make g++

# Create and set up directories with proper permissions
RUN mkdir -p /app && chown -R node:node /app
RUN mkdir -p /home/node/.npm && chown -R node:node /home/node

# Switch to non-root user
USER node

# Copy package files
COPY --chown=node:node package*.json ./

# Install dependencies using npm's default cache location
RUN npm ci --quiet --legacy-peer-deps

# Copy source code with non-root user
COPY --chown=node:node . .

# Build the application
RUN npm run build

# Production stage
FROM nginx:alpine as production

# Add non-root user
RUN adduser -D -u 1001 appuser

# Copy nginx configuration
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Copy the built assets to nginx
COPY --from=build /app/dist /usr/share/nginx/html

# Set correct permissions
RUN chown -R appuser:appuser /usr/share/nginx/html && \
    chown -R appuser:appuser /var/cache/nginx && \
    chown -R appuser:appuser /var/log/nginx && \
    chown -R appuser:appuser /etc/nginx/conf.d && \
    touch /var/run/nginx.pid && \
    chown -R appuser:appuser /var/run/nginx.pid

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=3s \
    CMD wget --quiet --tries=1 --spider http://localhost:80/ || exit 1

# Start Nginx
CMD ["nginx", "-g", "daemon off;"]
